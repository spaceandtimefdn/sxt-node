
//! Autogenerated weights for pallet_template
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Alexs-MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_template
// --extrinsic
// *
// --steps=50
// --repeat=20
// --wasm-execution=compiled
// --output
// pallets/template/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// TODO: add docs
pub trait WeightInfo {
	/// TODO: add docs
	fn update_tables() -> Weight;

	/// TODO
	fn create_tables_with_snapshot_and_commitment() -> Weight;

	/// TODO
	fn reset_commitments_and_schemas() -> Weight;

	/// Weight for clear tables
	fn clear_tables() -> Weight;

	/// Weight for create_empty_genesis_tables
	fn create_empty_genesis_tables() -> Weight;

	/// Weight for create_namespace
	fn create_namespace() -> Weight;

	/// drop a table
	fn drop_table() -> Weight;
}

/// TODO: add docs
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn update_tables() -> Weight {
		Weight::from_parts(0,0)
	}

	fn create_tables_with_snapshot_and_commitment() -> Weight {
		Weight::from_parts(0,0)
	}

	fn reset_commitments_and_schemas() -> Weight {
		Weight::from_parts(0, 0)
	}

	/// Weight for Clear Tables
	fn clear_tables() -> Weight {
		Weight::from_parts(0,0)
	}

	fn create_empty_genesis_tables() -> Weight {
		Weight::from_parts(0,0)
	}

	fn create_namespace() -> Weight {
		Weight::from_parts(0,0)
	}

	fn drop_table() -> Weight {
		Weight::from_parts(0,0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn drop_table() -> Weight {
		Weight::from_parts(0,0)
	}

	fn update_tables() -> Weight {
		Weight::from_parts(0,0)
	}

	fn create_tables_with_snapshot_and_commitment() -> Weight {
		Weight::from_parts(0,0)
	}

	fn reset_commitments_and_schemas() -> Weight {
		Weight::from_parts(0, 0)
	}

	fn clear_tables() -> Weight {
		Weight::from_parts(0, 0)
	}

	fn create_empty_genesis_tables() -> Weight {
		Weight::from_parts(0,0)
	}

	fn create_namespace() -> Weight {
		Weight::from_parts(0,0)
	}
}
